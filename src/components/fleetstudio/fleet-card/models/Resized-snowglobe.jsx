/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 .\src\glb\resized-snowglobe.gltf 
*/

import React, { useRef, useState, useMemo, useLayoutEffect, useEffect } from 'react'
import { Billboard, MeshTransmissionMaterial, Text3D, useGLTF, useTexture, Text } from '@react-three/drei'
import { useThree, useFrame } from '@react-three/fiber'
import * as THREE from 'three'
import gsap from 'gsap'
import { easing } from 'maath'
// import FireWorks from '../components/snowglobe/Fireworks'
import FireWorks from '../components/snowglobe/Fireworks'

export default function ScaledSnowGlobe(props) {
  const { nodes, materials } = useGLTF('/src/glb/resized-snowglobe.gltf')
  const { viewport } = useThree();

  const footer = document.querySelector('.footer')
  const snowGlobeRef = useRef()
  const snowGlobeRef2 = useRef()
  const internalWorldRef = useRef()
  const fireWorksRef = useRef()
  const [insideMesh, setInsideMesh] = useState(false)

  const groupRef = useRef()
  const texture = useTexture('/src/assets/svg/christmasBg2.jpg');
  texture.wrapS = THREE.RepeatWrapping; // Horizontal wrapping
  texture.wrapT = THREE.ClampToEdgeWrapping; // No vertical wrapping
  texture.repeat.set(2, 1);

  const { camera } = useThree()
  const cameraPosition = camera.position
  const ray = new THREE.Ray(new THREE.Vector2(0, 0), cameraPosition)
  const raycaster = new THREE.Raycaster()

  function useGsapContext(scope) {
    const ctx = useMemo(() => gsap.context(() => { }, scope), [scope])
    return ctx
  }

  const ctx = useGsapContext(snowGlobeRef)

  useLayoutEffect(() => {
    gsap.to(camera.position, {
      z: props.inside ? 0 : 3,
      x: props.inside ? 0 : 3,
      ease: 'power3.inOut',
      duration: 1.8
    })

    return () => ctx.revert()
  }, [props.inside])

  useFrame((state, delta) => {
    checkIntersection(snowGlobeRef.current, delta)
  })

  const checkIntersection = (object, delta) => {
    raycaster.set(cameraPosition, ray.direction)

    const intersections = raycaster.intersectObject(object)

    if (intersections.length > 0) {
      setInsideMesh(false)
    } else {
      setInsideMesh(true)
    }
    easing.dampC(internalWorldRef.current.material.color, intersections.length > 0 ? 'grey' : 'white', 0.25, delta)
    //  easing.damp(footer.style, 'opacity', intersections.length > 0 ? '0.1' : '1', 0.25, delta)
  }

  useEffect(() => {
    if (!insideMesh) {
      snowGlobeRef2.current.visible = false
      snowGlobeRef.current.visible = false
      fireWorksRef.current.visible = true
      internalWorldRef.current.visible = true
      camera.fov = 95
      camera.updateProjectionMatrix()
    } else {
      camera.fov = 65
      camera.updateProjectionMatrix()
      snowGlobeRef2.current.visible = true
      snowGlobeRef.current.visible = true
      fireWorksRef.current.visible = false
      internalWorldRef.current.visible = false
    }
  }, [insideMesh])


  return (
    <group {...props} dispose={null} position={[0, -1, 0]}>
      <mesh ref={snowGlobeRef} geometry={nodes.build_scenebuild_sceneSnow_Scene_Snow_Globe___Default1_0.geometry} material={materials.PaletteMaterial001} scale={0.08} >
        <MeshTransmissionMaterial
          backsideThickness={8}
          samples={4}
          thickness={0.9}
          anisotropicBlur={0.8}
          ior={1.8}
          iridescence={0.5}
          iridescenceIOR={1}
          iridescenceThicknessRange={[0, 1400]}
          clearcoat={1}
          roughness={0}
          envMapIntensity={0.7}
          metalness={0.3}
        />
      </mesh>
      <mesh ref={internalWorldRef} position={[0, 0, 0]}>
        <sphereGeometry args={[12.5, 24, 24]} />
        <meshStandardMaterial map={texture} side={THREE.BackSide} />
        <FireWorks ref={fireWorksRef} />
      </mesh>
      <mesh ref={snowGlobeRef2} geometry={nodes.build_scenebuild_sceneSnow_Scene_blinn1_0.geometry} material={materials.PaletteMaterial002} scale={0.08} >
        <meshPhysicalMaterial metalness={0.2} roughness={0.2} color={'white'} envMapIntensity={2} />
      </mesh>
      <Texts />
    </group>
  )
}

useGLTF.preload('/resized-snowglobe.gltf')

function Texts() {
  return (
    <>
      {/* <Text3D letterSpacing={0.06} size={0.3} font="/src/fonts/Druk_Regular.json" position={[-1, 0, 0]}>
        Fleet Studio
        <meshPhysicalMaterial metalness={0.2} roughness={0.2} color={'#a1a1a1'} />
      </Text3D> */}
      {/* <Billboard>
        <Text3D font="/src/fonts/DancingScript-VariableFont_wght.ttf" maxWidth={3.5} textAlign="center" position={[0, 0, 0]} fontSize="0.35" lineHeight={0.85}>
          Wishing you a restful holiday season. {'\n\n'}May your Christmas be blessed with lots of love, peace, and happiness.
        </Text3D>
        <Text3D maxWidth={2.5} textAlign="center" position={[0, 11.2, 0]} fillOpacity={0.6} fontSize="0.1">
          I will be on vacation until January 8th. Thank you for all your support in 2023. Great things are coming in 2024. Please stay tunned.
        </Text3D>
        <Text3D maxWidth={1.5} textAlign="center" position={[0, 10.8, 0]} fontSize="0.08">
          Anderson Mancini
        </Text3D>
      </Billboard> */}
    </>
  )
}
